<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/AIT_UI_GUIDE.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/AIT_UI_GUIDE.md" />
              <option name="updatedContent" value="# AIT Query Interface - User Guide&#10;&#10;##  Overview&#10;&#10;A modern, interactive web interface for querying AIT (Application Information Technology) tech stacks. The interface provides both synchronous and streaming query execution with real-time updates.&#10;&#10;##  File Location&#10;&#10;```&#10;/Users/vishan/Personal_Projects/Langgraph-POC/ait-query-interface.html&#10;```&#10;&#10;##  How to Use&#10;&#10;### Quick Start&#10;&#10;1. **Open the HTML file** in your browser:&#10;   ```bash&#10;   open ait-query-interface.html&#10;   # or double-click the file&#10;   ```&#10;&#10;2. **Make sure your Spring Boot application is running**:&#10;   ```bash&#10;   mvn spring-boot:run&#10;   # Application should be running on http://localhost:8080&#10;   ```&#10;&#10;3. **Enter your query** in the text area&#10;&#10;4. **Choose execution mode**:&#10;   - **Execute Query** (): Get complete results instantly&#10;   - **Stream Query** (): Watch the workflow in real-time&#10;&#10;##  Features&#10;&#10;### 1. **Two Query Modes**&#10;&#10;#### Synchronous Execution (Execute Query)&#10;- Click the **&quot;Execute Query&quot;** button&#10;- Get complete formatted results in one response&#10;- See execution statistics (time, route decision, etc.)&#10;- Best for: Quick queries and final results&#10;&#10;#### Streaming Execution (Stream Query)&#10;- Click the **&quot;Stream Query&quot;** button&#10;- Watch real-time workflow events:&#10;  - START: Workflow initialization&#10;  - PLANNING: Query analysis&#10;  - EXECUTING: Database querying&#10;  - CALCULATION: Results retrieved&#10;  - CHUNK: Markdown content streaming&#10;  - COMPLETE: Workflow finished&#10;- See live progress in the event console&#10;- Best for: Understanding workflow execution, large result sets&#10;&#10;### 2. **Example Queries**&#10;&#10;Click any example query to auto-fill the input:&#10;- &quot;AITs with Java &amp; MongoDB&quot;&#10;- &quot;Specific AIT lookup&quot;&#10;- &quot;Spring Boot AITs&quot;&#10;- &quot;PostgreSQL AITs&quot;&#10;- &quot;Multiple criteria&quot;&#10;&#10;### 3. **Natural Language Queries**&#10;&#10;You can ask questions naturally:&#10;```&#10;✅ &quot;Give me AITs using Java and MongoDB&quot;&#10;✅ &quot;What technologies does AIT 74563 use?&quot;&#10;✅ &quot;Find all AITs with Spring Boot&quot;&#10;✅ &quot;AITs that use PostgreSQL database&quot;&#10;✅ &quot;Show me AITs using Java, MongoDB, and Spring Boot&quot;&#10;```&#10;&#10;### 4. **Formatted Results**&#10;&#10;Results are displayed with:&#10;- Beautiful Markdown rendering&#10;- Syntax highlighting for tech names&#10;- Organized sections (Languages, Frameworks, Databases, etc.)&#10;- Statistics dashboard (execution time, route decision)&#10;- Color-coded badges for success/error states&#10;&#10;### 5. **Keyboard Shortcuts**&#10;&#10;- **Ctrl + Enter**: Execute query&#10;- Quickly test queries without clicking buttons!&#10;&#10;##  UI Components&#10;&#10;### Header Section&#10;- **Title**: AIT Tech Stack Query Interface&#10;- **Description**: Brief explanation of functionality&#10;- **Gradient Background**: Modern purple gradient design&#10;&#10;### Query Input&#10;- **Large Text Area**: Multi-line query input&#10;- **Placeholder Text**: Helpful examples&#10;- **Focus State**: Visual feedback when typing&#10;&#10;### Action Buttons&#10;- ** Execute Query**: Synchronous execution&#10;- ** Stream Query**: Real-time streaming&#10;- **️ Clear Results**: Reset the interface&#10;&#10;### Example Queries&#10;- **Quick Fill**: Click to populate input&#10;- **Hover Effect**: Visual feedback on hover&#10;- **Common Use Cases**: Pre-configured queries&#10;&#10;### Results Display&#10;&#10;#### Statistics Cards&#10;Shows three key metrics:&#10;1. **Execution Time**: Query processing duration&#10;2. **Used Tool Flow**: Whether workflow was used&#10;3. **Route Decision**: Which path was taken&#10;&#10;#### Markdown Rendering&#10;- **Headers**: H1, H2, H3 with different styling&#10;- **Lists**: Bullet points for tech items&#10;- **Bold Text**: Emphasized technology names&#10;- **Horizontal Rules**: Section separators&#10;- **Code Blocks**: Inline code formatting&#10;&#10;#### Stream Events Console&#10;- **Dark Theme**: Terminal-style display&#10;- **Color Coding**: Different colors for event types&#10;- **Auto-scroll**: Always shows latest events&#10;- **Timestamps**: When each event occurred&#10;&#10;##  Example Usage&#10;&#10;### Example 1: Simple AIT Lookup&#10;&#10;**Query:**&#10;```&#10;What technologies does AIT 74563 use?&#10;```&#10;&#10;**Result:**&#10;```markdown&#10;## AIT: 74563&#10;&#10;###  Languages&#10;- java (17.0.1)&#10;&#10;###  Frameworks&#10;- springboot (3.2.0)&#10;&#10;###  Databases&#10;- mongo (12.0.0) [DEV]&#10;...&#10;```&#10;&#10;### Example 2: Multi-Criteria Search&#10;&#10;**Query:**&#10;```&#10;Give me AITs using Java and MongoDB&#10;```&#10;&#10;**Result:**&#10;```markdown&#10;#  AITs Using Requested AITs&#10;&#10;Below are the AITs that have Requested AITs in their tech stack:&#10;&#10;---&#10;&#10;## AIT: 74563&#10;[Full tech stack details...]&#10;&#10;---&#10;&#10;Total AITs Found: 1&#10;```&#10;&#10;### Example 3: Streaming Query&#10;&#10;**Query:**&#10;```&#10;AITs using Spring Boot&#10;```&#10;&#10;**Stream Events:**&#10;```&#10;[10:30:45] START - ait_system: Starting AIT Tech Stack query workflow...&#10;[10:30:45] PLANNING - ait_planner: Analyzing query and determining AIT search strategy...&#10;[10:30:46] EXECUTING - ait_query: Querying AIT database with dynamic field paths...&#10;[10:30:46] CALCULATION - ait_query: AIT query executed: 74563,74564&#10;[10:30:47] CHUNK - ait_renderer: #  AITs Using Spring Boot&#10;[10:30:47] CHUNK - ait_renderer: ## AIT: 74563&#10;[10:30:47] COMPLETE - ait_system: AIT workflow completed successfully&#10;```&#10;&#10;##  API Endpoints Used&#10;&#10;The UI calls these backend endpoints:&#10;&#10;### 1. Execute Endpoint&#10;```&#10;POST http://localhost:8080/api/langgraph/ait/execute&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;query&quot;: &quot;your query here&quot;,&#10;  &quot;role&quot;: &quot;user&quot;&#10;}&#10;```&#10;&#10;### 2. Stream Endpoint&#10;```&#10;POST http://localhost:8080/api/langgraph/ait/stream&#10;Content-Type: application/json&#10;Accept: text/event-stream&#10;&#10;{&#10;  &quot;query&quot;: &quot;your query here&quot;,&#10;  &quot;role&quot;: &quot;user&quot;&#10;}&#10;```&#10;&#10;##  Configuration&#10;&#10;### Changing the API URL&#10;&#10;If your backend runs on a different port or host, update the configuration in the HTML file:&#10;&#10;```javascript&#10;// At the top of the &lt;script&gt; section&#10;const API_BASE_URL = 'http://localhost:8080/api/langgraph';&#10;&#10;// Change to your backend URL:&#10;const API_BASE_URL = 'http://your-host:your-port/api/langgraph';&#10;```&#10;&#10;##  Customization&#10;&#10;### Changing Colors&#10;&#10;The UI uses CSS variables. You can modify the gradient colors:&#10;&#10;```css&#10;/* Header gradient */&#10;background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;&#10;/* Change to your preferred colors */&#10;background: linear-gradient(135deg, #your-color1 0%, #your-color2 100%);&#10;```&#10;&#10;### Changing Fonts&#10;&#10;```css&#10;font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;&#10;&#10;/* Change to your preferred fonts */&#10;font-family: 'Your Font', 'Fallback Font', sans-serif;&#10;```&#10;&#10;##  Troubleshooting&#10;&#10;### Issue: &quot;Failed to fetch&quot; Error&#10;&#10;**Solution:**&#10;- Make sure the Spring Boot application is running&#10;- Check that it's accessible at `http://localhost:8080`&#10;- Verify CORS is enabled in the controller (`@CrossOrigin(origins = &quot;*&quot;)`)&#10;&#10;### Issue: Streaming doesn't work&#10;&#10;**Solution:**&#10;- The streaming uses the Fetch API with ReadableStream&#10;- Make sure you're using a modern browser (Chrome, Firefox, Edge, Safari)&#10;- Check browser console for any errors&#10;&#10;### Issue: Results not displaying&#10;&#10;**Solution:**&#10;- Open browser Developer Tools (F12)&#10;- Check the Console tab for JavaScript errors&#10;- Check the Network tab to see API responses&#10;- Verify the API is returning proper JSON format&#10;&#10;### Issue: CORS Error&#10;&#10;**Solution:**&#10;Add to your Spring Boot application:&#10;```java&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;```&#10;&#10;Or configure globally in your application:&#10;```java&#10;@Configuration&#10;public class WebConfig implements WebMvcConfigurer {&#10;    @Override&#10;    public void addCorsMappings(CorsRegistry registry) {&#10;        registry.addMapping(&quot;/api/**&quot;)&#10;                .allowedOrigins(&quot;*&quot;)&#10;                .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;);&#10;    }&#10;}&#10;```&#10;&#10;##  Responsive Design&#10;&#10;The interface is fully responsive:&#10;- **Desktop**: Full-width layout with side-by-side elements&#10;- **Tablet**: Adjusted spacing and font sizes&#10;- **Mobile**: Stacked layout, full-width buttons&#10;&#10;##  Tips &amp; Best Practices&#10;&#10;1. **Use Example Queries**: Start with examples to understand the format&#10;2. **Try Streaming**: See how the workflow executes step-by-step&#10;3. **Clear Results**: Use the clear button between queries for better organization&#10;4. **Ctrl+Enter**: Quick query execution shortcut&#10;5. **Natural Language**: Don't worry about exact syntax, ask naturally&#10;&#10;##  Advanced Features&#10;&#10;### Copy Results&#10;You can select and copy any part of the rendered Markdown for documentation.&#10;&#10;### Multiple Queries&#10;Test different queries back-to-back. Results are replaced with each new query.&#10;&#10;### Event Monitoring&#10;The stream events console shows the complete workflow execution for debugging and understanding.&#10;&#10;##  Browser Compatibility&#10;&#10;✅ **Chrome/Edge**: Fully supported  &#10;✅ **Firefox**: Fully supported  &#10;✅ **Safari**: Fully supported  &#10;⚠️ **Internet Explorer**: Not supported (use modern browsers)&#10;&#10;##  Enjoy!&#10;&#10;You now have a powerful, beautiful interface for querying AIT tech stacks. Happy querying! &#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>